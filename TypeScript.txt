-------------------------------------------

function log(message) {
    console.log(message);
}

var message = "Hello World";

log(message);

-------------------------------------------

function doSomething() {
    for ( var i = 0; i < 5; i++){
    console.log(i);
    }
    console.log('Finally: '+i);
}
doSomething();

-------------------------------------------

let a: number;
let b: boolean;
let c: string;
let d: any;
let e: number [] = [1, 2, 3];
let f: any[] = [1, true, 'a', false];

const ColorRed = 0;
const ColorGreen = 1;
const ColorBlue = 2;

enum Color{Red = 0, Green = 1, Blue = 2, Purple = 3}
let backgroundColor = Color.Red;

	TypeScript
	JavaScript

var a;
var b;
var c;
var d;
var e = [1, 2, 3];
var f = [1, true, 'a', false];
var ColorRed = 0;
var ColorGreen = 1;
var ColorBlue = 2;
var Color;
(function (Color) {
    Color[Color["Red"] = 0] = "Red";
    Color[Color["Green"] = 1] = "Green";
    Color[Color["Blue"] = 2] = "Blue";
    Color[Color["Purple"] = 3] = "Purple";
})(Color || (Color = {}));
var backgroundColor = Color.Red;

-------------------------------------------

let message;
message = 'abc';
let endsWithC = (<string>message).endsWith('c');
let alternativeWay = (message as string).endsWith('c');

-------------------------------------------

//... TypeScript...//
let log = function(message) {
    console.log(message);
}
let doLog = (message) => console.log(message);
 

//... JavaScript...//
var log = function (message) {
    console.log(message);
};
var doLog = function (message) { return console.log(message); };

-------------------------------------------
