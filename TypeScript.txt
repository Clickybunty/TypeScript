BearbeitungsText für das Tutorial

//...git --version

//...git config --global user.name "MAX-Mustermann"

//...git config --global user.email "MAX@Musterman.de"

//...mkdir myproject

//...CD myproject 

//...git init

//...git status

//...git add ("File"/--all)  /  git add -A 

//...git commit -m "Beschreibung z.B. Hello World!"

//...git status --short

//...git commit -a -m "Updated index.html with a new line"
//  Änderungen direkt zu übernehmen und 
//  die Staging-Umgebung zu überspringen. 
//  Die -a Option stellt automatisch jede geänderte, 
//  bereits getrackte Datei bereit.

//...git log    //...Verlauf der Commits für ein Repository anzuzeigen

//...git command -help  /  git help --all

//...git branch name-des-branch 

//...git branch     //...zeigt den aktuellen Branch an

//...git checkout name-des-branch       
//   wechselt in den angegebene Branch z.B
//   git checkout master        
//   Switched to branch 'master'

//...dir 

//...git checkout -b emergency-fix
//   Switched to a new branch 'emergency-fix'
//   git checkout master
//...git merge emergency-fix 
//   merget den aktuellen Branch 'master' mit emergency-fix zusammen
//...git branch -d emergency-fix
//   Deleted branch emergency-fix (was dfa79db).


//...git remote add origin https://github.com/PushTo.git
//   den Link gibt es bei GitHub

//...git push --set-upstream origin master 
//   Verschieben den Master-Branch auf die URL als Standard-Remote-Branch

//...git fetch origin
//   Aktualisiert das Lokale Git

//...git log origin/master 





-------------------------------------------

function log(message) {
    console.log(message);
}

var message = "Hello World";

log(message);

-------------------------------------------

function doSomething() {
    for ( var i = 0; i < 5; i++){
    console.log(i);
    }
    console.log('Finally: '+i);
}
doSomething();

-------------------------------------------

let a: number;
let b: boolean;
let c: string;
let d: any;
let e: number [] = [1, 2, 3];
let f: any[] = [1, true, 'a', false];

const ColorRed = 0;
const ColorGreen = 1;
const ColorBlue = 2;

enum Color{Red = 0, Green = 1, Blue = 2, Purple = 3}
let backgroundColor = Color.Red;

	TypeScript
	JavaScript

var a;
var b;
var c;
var d;
var e = [1, 2, 3];
var f = [1, true, 'a', false];
var ColorRed = 0;
var ColorGreen = 1;
var ColorBlue = 2;
var Color;
(function (Color) {
    Color[Color["Red"] = 0] = "Red";
    Color[Color["Green"] = 1] = "Green";
    Color[Color["Blue"] = 2] = "Blue";
    Color[Color["Purple"] = 3] = "Purple";
})(Color || (Color = {}));
var backgroundColor = Color.Red;

-------------------------------------------

let message;
message = 'abc';
let endsWithC = (<string>message).endsWith('c');
let alternativeWay = (message as string).endsWith('c');

-------------------------------------------

//...TypeScript...//
let log = function(message) {
    console.log(message);
}
let doLog = (message) => console.log(message);
 

//...JavaScript...//
var log = function (message) {
    console.log(message);
};
var doLog = function (message) { return console.log(message); };

-------------------------------------------
